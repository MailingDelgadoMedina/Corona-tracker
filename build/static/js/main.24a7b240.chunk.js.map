{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","util.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","Card","CardContent","Typography","className","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","casesType","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","b","Map","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","TableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","key","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.24a7b240.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card,CardContent,Typography} from \"@material-ui/core\";\r\n\r\nfunction InfoBox({title,cases,total}) {\r\n    return (\r\n        <div>\r\n            <Card>\r\n               <CardContent>\r\n                        <Typography className=\"infoBox_Title\" color=\"textSecondary\">\r\n                            {title}\r\n\r\n                         </Typography> \r\n                         <h2 className=\"infoBox_Cases\">{cases} </h2>\r\n                         <Typography className=\"infoBox_Total\" color=\"textSecondary\">\r\n                            {total} Total Cases\r\n\r\n                         </Typography> \r\n \r\n                </CardContent> \r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React,{useState,useEffect} from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n  \r\n  const buildChartData = (data, casesType=\"cases\") => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        let newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n  };\r\n  \r\n  function LineGraph({ casesType }) {\r\n    const [data, setData] = useState({});\r\n  \r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=10\")\r\n          .then((response) => {\r\n            return response.json();\r\n          })\r\n          .then((data) => {\r\n            let chartData = buildChartData(data, casesType);\r\n            setData(chartData);\r\n            console.log(chartData);\r\n            // buildChart(chartData);\r\n          });\r\n      };\r\n  \r\n      fetchData();\r\n    }, [casesType]);\r\n  \r\n    return (\r\n      <div>\r\n        {data?.length > 0 && (\r\n          <Line\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  backgroundColor: \"#b2ebf2\",\r\n                  borderColor: \"#00b7c2\",\r\n                  data: data,\r\n                },\r\n              ],\r\n            }}\r\n            options={options}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\nexport default LineGraph\r\n","import React from 'react'\r\n\r\nfunction Table ({countries})  {\r\n    return (\r\n        <div className=\"Table\">\r\n           {\r\n               countries.map(\r\n                   ({country,cases})=>(\r\n                     <tr>\r\n                         <td>{country}</td>\r\n                         <td><strong>\r\n                         {cases}\r\n                             </strong></td>\r\n                     </tr>  \r\n                   )\r\n               )\r\n           }\r\n\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\n  const App = () => {\n    const [country, setInputCountry] = useState(\"wroldwide\");\n    const [countryInfo, setCountryInfo] = useState({});\n    const [countries, setCountries] = useState([]);\n    const [mapCountries, setMapCountries] = useState([]);\n    const [TableData, setTableData] = useState([]);\n    const [casesType, setCasesType] = useState(\"cases\");\n    const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n    const [mapZoom, setMapZoom] = useState(3);\n  \n    useEffect(() => {\n      fetch(\"https://disease.sh/v3/covid-19/all\")\n        .then((response) => response.json())\n        .then((data) => {\n          setCountryInfo(data);\n        });\n    }, []);\n  \n    useEffect(() => {\n      const getCountriesData = async () => {\n        fetch(\"https://disease.sh/v3/covid-19/countries\")\n          .then((response) => response.json())\n          .then((data) => {\n            const countries = data.map((country) => ({\n              name: country.country,\n              value: country.countryInfo.iso2,\n            }));\n            let sortedData = sortData(data);\n            setCountries(countries);\n            setMapCountries(data);\n            setTableData(sortedData);\n          });\n      };\n  \n      getCountriesData();\n    }, []);\n  \n    console.log(casesType);\n  \n    const onCountryChange = async (e) => {\n      const countryCode = e.target.value;\n  \n      const url =\n        countryCode === \"worldwide\"\n          ? \"https://disease.sh/v3/covid-19/all\"\n          : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n      await fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          setInputCountry(countryCode);\n          setCountryInfo(data);\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n        });\n    };\n  \n\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"appLeft\">\n          {/* Header */}\n          <div className=\"app_Header\">\n                <h1>covaid 19 Tracker</h1>\n                    <FormControl  className= \"app_dropdown\">\n                      <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n                    <MenuItem value=\"wroldwide\"> wroldwide</MenuItem>\n            {/* loop through all the countries */}\n\n            {\n              countries.map(\n                (country)=>(\n                <MenuItem value={country.value} key={country.value}> {country.name}</MenuItem>\n                \n              ) )\n            }\n\n\n            </Select>\n\n                  </FormControl>\n\n           </div> \n\n          <div className=\"app_status\">\n               <InfoBox title=\"Coronavirus Cases\" cases={countryInfo.todayCases} total={countryInfo.cases}/>       \n               <InfoBox title=\"Coronavirus Recovers\"  cases={countryInfo.todayRecovered} total={countryInfo.recovered}/>       \n               <InfoBox title=\"Deaths\"  cases={countryInfo.todayDeaths} total={countryInfo.deaths}/>       \n\n          </div>\n          <div>\n          <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom} />\n          </div>\n\n\n      </div>\n\n        <div className=\"app_right\">\n          <Card>\n            <CardContent>\n              <h3>Live Cases BY Country</h3>\n              <Table countries={TableData}/>\n\n              <h3>\n                WroldWide New Cases\n\n\n                <LineGraph/>\n              </h3>\n            </CardContent>\n\n          </Card>\n        </div>\n         \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}